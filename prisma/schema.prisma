// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Schema for the User model
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  balances  Balance[]
  accounts  Account[]
  Session   Session[]
}

// Schema for the Balance model
model Balance {
  id          Int         @id @default(autoincrement())
  amount      Int
  currency    String
  lastUpdated DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  Record      Record[]
  Recurrent   Recurrent[]
}

// Schema for record with amount, isExpense, description, date, received, autoRecieve, and balanceId
model Record {
  id          Int        @id @default(autoincrement())
  amount      Int
  isExpense   Boolean
  description String?
  date        DateTime
  received    Boolean
  autoRecieve Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  balance     Balance    @relation(fields: [balanceId], references: [id])
  balanceId   Int
  recurrent   Recurrent? @relation(fields: [recurrentId], references: [id])
  recurrentId Int?
}

// Model Recurrent with amount, isExpense, description, autoReceive startDate, endDate, frequency, and balanceId
model Recurrent {
  id          Int      @id @default(autoincrement())
  amount      Int
  isExpense   Boolean
  description String?
  autoReceive Boolean
  startDate   DateTime
  endDate     DateTime
  frequency   String // (never, daily, weekly, monthly, yearly)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  balance     Balance  @relation(fields: [balanceId], references: [id])
  balanceId   Int
  Record      Record[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
